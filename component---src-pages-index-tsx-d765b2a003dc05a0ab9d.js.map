{"version":3,"file":"component---src-pages-index-tsx-d765b2a003dc05a0ab9d.js","mappings":"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","sources":["webpack://hustle-dev-blog/./src/pages/index.tsx","webpack://hustle-dev-blog/./src/pages/index.module.css"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport type { HeadProps, PageProps } from 'gatsby';\nimport { graphql } from 'gatsby';\nimport * as styles from './index.module.css';\nimport { ArticleCard, ArticleItem, FloatingButton, ProfileCard, Seo, Tag, TagButton } from '@components';\nimport { TYPO } from '@styles';\n\nconst IndexPage = ({ data }: PageProps<Queries.IndexQuery>) => {\n  const allPosts = data.allMarkdownRemark.nodes;\n  const recentPosts = allPosts.slice(0, 2);\n  const sortedTagsWithTotalCount = [\n    { fieldValue: 'All', totalCount: data.allMarkdownRemark.totalCount },\n    ...data.allMarkdownRemark.group,\n  ].sort((a, b) => b.totalCount - a.totalCount);\n\n  const [selectedTag, setSelectedTag] = useState<string>('All');\n  const filteredPosts = allPosts.filter(\n    ({ frontmatter: { tags } }) => selectedTag === 'All' || tags.includes(selectedTag)\n  );\n\n  const [displayedItems, setDisplayedItems] = useState(8);\n  const visiblePosts = filteredPosts.slice(0, displayedItems);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (!entries[0].isIntersecting) return;\n\n        if (displayedItems <= data.allMarkdownRemark.totalCount) {\n          setDisplayedItems((prev) => prev + 8);\n        } else {\n          observer.disconnect();\n        }\n      },\n      { threshold: 0 }\n    );\n    observer.observe(document.querySelector('footer') as HTMLElement);\n    return () => observer.disconnect();\n  }, [displayedItems]);\n\n  return (\n    <>\n      <main className={styles.main}>\n        <aside className={styles.aside}>\n          <ProfileCard />\n        </aside>\n        <div className={styles.shrinkSpace}></div>\n        <section className={styles.wrapper}>\n          <h2 style={TYPO.T2} className={styles.heading}>\n            New posts ðŸ“‘\n          </h2>\n          <ul className={styles.articleRowList}>\n            {recentPosts.map(\n              ({ frontmatter: { title, description, date, tags, slug, heroImage, heroImageAlt }, id }) => (\n                <ArticleCard\n                  key={id}\n                  title={title}\n                  description={description}\n                  date={date}\n                  tags={tags}\n                  slug={slug}\n                  heroImage={heroImage?.childImageSharp?.gatsbyImageData!}\n                  heroImageAlt={heroImageAlt}\n                />\n              )\n            )}\n          </ul>\n          <hr className={styles.divider}></hr>\n          <ul className={styles.tagList}>\n            {sortedTagsWithTotalCount.map(({ fieldValue, totalCount }) => (\n              <li key={fieldValue!} className={styles.tagItem}>\n                <TagButton\n                  name={fieldValue!}\n                  count={totalCount}\n                  onClick={() => {\n                    setSelectedTag(fieldValue!);\n                  }}\n                  isSelected={selectedTag === fieldValue!}\n                />\n              </li>\n            ))}\n          </ul>\n          <ul className={styles.articleList}>\n            {visiblePosts.map(\n              ({ frontmatter: { title, description, date, tags, slug, heroImage, heroImageAlt }, id }) => (\n                <ArticleItem\n                  key={id}\n                  title={title}\n                  description={description}\n                  date={date}\n                  tags={tags}\n                  slug={slug}\n                  heroImage={heroImage?.childImageSharp?.gatsbyImageData!}\n                  heroImageAlt={heroImageAlt}\n                />\n              )\n            )}\n          </ul>\n        </section>\n        <FloatingButton />\n      </main>\n    </>\n  );\n};\n\nexport const query = graphql`\n  query Index {\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      totalCount\n      nodes {\n        frontmatter {\n          tags\n          slug\n          description\n          date(formatString: \"YY.MM.DD\")\n          title\n          heroImage {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED)\n            }\n          }\n          heroImageAlt\n        }\n        id\n      }\n      group(field: { frontmatter: { tags: SELECT } }) {\n        fieldValue\n        totalCount\n      }\n    }\n    site {\n      siteMetadata {\n        siteUrl\n        description\n        title\n        keywords\n      }\n    }\n    file(relativePath: { eq: \"blogImage.png\" }) {\n      publicURL\n    }\n  }\n`;\n\nexport default IndexPage;\n\nexport const Head = ({ location: { pathname }, data: { site, file } }: HeadProps<Queries.IndexQuery>) => {\n  const seo = {\n    title: site?.siteMetadata.title,\n    description: site?.siteMetadata.description,\n    heroImage: file?.publicURL!,\n  };\n\n  return <Seo title={seo.title} description={seo.description} heroImage={seo.heroImage} pathname={pathname}></Seo>;\n};\n","// extracted by mini-css-extract-plugin\nexport var articleList = \"index-module--articleList--a5c3b\";\nexport var articleRowList = \"index-module--articleRowList--55fb0\";\nexport var aside = \"index-module--aside--cb8e7\";\nexport var divider = \"index-module--divider--09051\";\nexport var heading = \"index-module--heading--e875f\";\nexport var main = \"index-module--main--1ba09\";\nexport var shrinkSpace = \"index-module--shrinkSpace--15e14\";\nexport var tagItem = \"index-module--tagItem--78597\";\nexport var tagList = \"index-module--tagList--011db\";\nexport var wrapper = \"index-module--wrapper--50df2\";"],"names":["_ref","data","allPosts","allMarkdownRemark","nodes","recentPosts","slice","sortedTagsWithTotalCount","fieldValue","totalCount","concat","_toConsumableArray","group","sort","a","b","selectedTag","setSelectedTag","useState","filteredPosts","filter","_ref2","frontmatter","tags","includes","displayedItems","setDisplayedItems","visiblePosts","useEffect","observer","IntersectionObserver","entries","isIntersecting","prev","disconnect","threshold","observe","document","querySelector","React","className","ProfileCard","style","TYPO","map","_ref3","_heroImage$childImage","title","description","date","slug","heroImage","heroImageAlt","id","ArticleCard","key","childImageSharp","gatsbyImageData","_ref4","TagButton","name","count","onClick","isSelected","_ref5","_heroImage$childImage2","ArticleItem","FloatingButton","Head","_ref6","location","pathname","site","file","seo","siteMetadata","publicURL","Seo"],"sourceRoot":""}