{"version":3,"file":"component---src-pages-index-tsx-9a877a81db8191330309.js","mappings":"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","sources":["webpack://hustle-dev-blog/./src/views/Home/components/Post/components/Date/Date.tsx","webpack://hustle-dev-blog/./src/views/Home/components/Post/components/Date/Date.module.css","webpack://hustle-dev-blog/./src/views/Home/components/Post/components/Description/Description.tsx","webpack://hustle-dev-blog/./src/views/Home/components/Post/components/Description/Description.module.css","webpack://hustle-dev-blog/./src/views/Home/components/Post/components/TagList/TagList.tsx","webpack://hustle-dev-blog/./src/views/Home/components/Post/components/TagList/TagList.module.css","webpack://hustle-dev-blog/./src/views/Home/components/Post/components/Title/Title.tsx","webpack://hustle-dev-blog/./src/views/Home/components/Post/components/Title/Title.module.css","webpack://hustle-dev-blog/./src/views/Home/components/Post/Post.tsx","webpack://hustle-dev-blog/./src/views/Home/components/Post/Post.module.css","webpack://hustle-dev-blog/./src/views/Home/components/PostList/PostList.tsx","webpack://hustle-dev-blog/./src/views/Home/components/PostList/PostList.module.css","webpack://hustle-dev-blog/./src/views/Home/components/RecentPost/RecentPost.tsx","webpack://hustle-dev-blog/./src/views/Home/components/RecentPost/RecentPost.module.css","webpack://hustle-dev-blog/./src/views/Home/components/TagButtonWithCount/TagButtonWithCount.tsx","webpack://hustle-dev-blog/./src/views/Home/components/TagButtonWithCount/TagButtonWithCount.module.css","webpack://hustle-dev-blog/./src/views/Home/components/TagList/TagList.tsx","webpack://hustle-dev-blog/./src/views/Home/components/TagList/TagList.module.css","webpack://hustle-dev-blog/./src/views/Home/Home.module.css","webpack://hustle-dev-blog/./src/views/Home/constants/Tag.ts","webpack://hustle-dev-blog/./src/views/Home/hooks/useTag.tsx","webpack://hustle-dev-blog/./src/views/Home/Home.tsx","webpack://hustle-dev-blog/./src/views/Home/hooks/usePostInfiniteScroll.tsx"],"sourcesContent":["import clsx from 'clsx'\n\nimport * as styles from './Date.module.css'\n\ntype DateProps = {\n  date: string\n  className?: string\n}\n\nexport const Date = ({ date, className }: DateProps) => <h3 className={clsx(styles.date, className)}>{date}</h3>\n","// extracted by mini-css-extract-plugin\nexport var date = \"Date-module--date--d4fbd\";","import clsx from 'clsx'\n\nimport * as styles from './Description.module.css'\n\ntype DescriptionProps = {\n  description: string\n  className?: string\n}\n\nexport const Description = ({ description, className }: DescriptionProps) => (\n  <p className={clsx(styles.description, className)}>{description}</p>\n)\n","// extracted by mini-css-extract-plugin\nexport var description = \"Description-module--description--9ea1f\";","import clsx from 'clsx'\n\nimport { Tag } from '@/components'\n\nimport * as styles from './TagList.module.css'\n\ntype TagListProps = {\n  tags: readonly string[]\n  className?: string\n}\n\nexport const TagList = ({ tags, className }: TagListProps) => (\n  <ul className={clsx(styles.tagList, className)}>\n    {tags.map((tag) => (\n      <Tag key={tag} name={tag} />\n    ))}\n  </ul>\n)\n","// extracted by mini-css-extract-plugin\nexport var tagList = \"TagList-module--tagList--d5cc6\";","import clsx from 'clsx'\n\nimport * as styles from './Title.module.css'\n\ntype TitleProps = {\n  title: string\n  className?: string\n}\n\nexport const Title = ({ title, className }: TitleProps) => <h3 className={clsx(styles.title, className)}>{title}</h3>\n","// extracted by mini-css-extract-plugin\nexport var title = \"Title-module--title--3663c\";","import clsx from 'clsx'\nimport { Link } from 'gatsby'\nimport { GatsbyImage, type IGatsbyImageData } from 'gatsby-plugin-image'\nimport { match } from 'ts-pattern'\n\nimport * as typo from '@/styles/typography.module.css'\nimport { getRefinedImage } from '@/utils'\n\nimport { Date, Description, TagList, Title } from './components'\nimport * as styles from './Post.module.css'\n\ntype PostProps = {\n  variants: 'card' | 'item'\n  title: string\n  description: string\n  date: string\n  tags: readonly string[]\n  slug: string\n  heroImage: IGatsbyImageData | undefined\n  heroImageAlt: string\n}\n\nexport const Post = ({ variants, title, description, date, tags, slug, heroImage, heroImageAlt }: PostProps) => {\n  const image = getRefinedImage(heroImage)\n\n  return (\n    <Link to={`/posts${slug}`} className={styles.articleLink}>\n      {match(variants)\n        .with('card', () => (\n          <article className={styles.card}>\n            <figure>\n              <GatsbyImage image={image} alt={heroImageAlt} className={styles.cardImage} />\n              <figcaption className={styles.cardCaption}>\n                <Date date={date} className={clsx(styles.cardDate, typo.B7)} />\n                <TagList tags={tags} className={styles.cardTagList} />\n                <Title title={title} className={clsx(styles.cardTitle, typo.H1)} />\n                <Description description={description} className={clsx(styles.cardDescription, typo.B5)} />\n              </figcaption>\n            </figure>\n          </article>\n        ))\n        .with('item', () => (\n          <article className={styles.item}>\n            <figure className={styles.itemFigure}>\n              <GatsbyImage image={image} alt={heroImageAlt} className={styles.itemImage} />\n              <figcaption className={styles.itemCaption}>\n                <TagList tags={tags} />\n                <Title title={title} className={clsx(styles.itemTitle, typo.T1)} />\n                <Description description={description} className={clsx(styles.itemDescription, typo.B5)} />\n                <Date date={date} className={clsx(styles.itemDate, typo.B6)} />\n              </figcaption>\n            </figure>\n          </article>\n        ))\n        .exhaustive()}\n    </Link>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport var articleLink = \"Post-module--articleLink--d1094\";\nexport var card = \"Post-module--card--c936a\";\nexport var cardCaption = \"Post-module--cardCaption--b686f\";\nexport var cardDate = \"Post-module--cardDate--b072f\";\nexport var cardDescription = \"Post-module--cardDescription--9c3c1\";\nexport var cardImage = \"Post-module--cardImage--37335\";\nexport var cardTagList = \"Post-module--cardTagList--d2f12\";\nexport var cardTitle = \"Post-module--cardTitle--31c4d\";\nexport var item = \"Post-module--item--25f91\";\nexport var itemCaption = \"Post-module--itemCaption--04590\";\nexport var itemDate = \"Post-module--itemDate--dd369\";\nexport var itemDescription = \"Post-module--itemDescription--8c7de\";\nexport var itemFigure = \"Post-module--itemFigure--894b5\";\nexport var itemImage = \"Post-module--itemImage--0bdef\";\nexport var itemTitle = \"Post-module--itemTitle--5b5c6\";","import clsx from 'clsx'\n\nimport { Post } from '../Post'\nimport * as styles from './PostList.module.css'\n\ntype PostListProps = {\n  posts: Queries.HomeQuery['allMarkdownRemark']['nodes']\n  className?: string\n}\n\nexport const PostList = ({ posts, className }: PostListProps) => {\n  return (\n    <ul className={clsx(styles.postList, className)}>\n      {posts.map(({ frontmatter: { title, description, date, tags, slug, heroImage, heroImageAlt }, id }) => (\n        <Post\n          key={id}\n          variants=\"item\"\n          title={title}\n          description={description}\n          date={date}\n          tags={tags}\n          slug={slug}\n          heroImage={heroImage?.childImageSharp?.gatsbyImageData}\n          heroImageAlt={heroImageAlt}\n        />\n      ))}\n    </ul>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport var postList = \"PostList-module--postList--f7183\";","import clsx from 'clsx'\n\nimport * as typo from '@/styles/typography.module.css'\n\nimport { Post } from '../Post'\nimport * as styles from './RecentPost.module.css'\n\ntype RecentPostProps = {\n  posts: Queries.HomeQuery['allMarkdownRemark']['nodes']\n}\n\nexport const RecentPost = ({ posts }: RecentPostProps) => (\n  <>\n    <h2 className={clsx(styles.heading, typo.T2)}>New posts 📑</h2>\n    <ul className={styles.recentPostList}>\n      {posts.map(({ frontmatter: { title, description, date, tags, slug, heroImage, heroImageAlt }, id }) => (\n        <Post\n          key={id}\n          variants=\"card\"\n          title={title}\n          description={description}\n          date={date}\n          tags={tags}\n          slug={slug}\n          heroImage={heroImage?.childImageSharp?.gatsbyImageData}\n          heroImageAlt={heroImageAlt}\n        />\n      ))}\n    </ul>\n  </>\n)\n","// extracted by mini-css-extract-plugin\nexport var heading = \"RecentPost-module--heading--e35dd\";\nexport var recentPostList = \"RecentPost-module--recentPostList--d076e\";","import clsx from 'clsx'\n\nimport * as typo from '@/styles/typography.module.css'\n\nimport * as styles from './TagButtonWithCount.module.css'\n\ntype TagButtonWithCountProps = {\n  name: string\n  count: number\n  onClick?: () => void\n  isSelected: boolean\n}\n\nexport const TagButtonWithCount = ({ name, count, isSelected, onClick }: TagButtonWithCountProps) => (\n  <button onClick={onClick} className={clsx(styles.tagButton, { [styles.active]: isSelected })}>\n    <span className={typo.B5}>\n      {name} ({count})\n    </span>\n  </button>\n)\n","// extracted by mini-css-extract-plugin\nexport var active = \"TagButtonWithCount-module--active--41c40\";\nexport var tagButton = \"TagButtonWithCount-module--tagButton--64c99\";","import clsx from 'clsx'\nimport type { KeyboardEvent, MouseEvent } from 'react'\n\nimport { getRefinedStringValue } from '@/utils'\n\nimport { TagButtonWithCount } from '../TagButtonWithCount'\nimport * as styles from './TagList.module.css'\n\ntype TagListProps = {\n  tags: { fieldValue: string | null; totalCount: number }[]\n  selectedTag: string\n  clickTag: (e: MouseEvent<HTMLElement> | KeyboardEvent<HTMLElement>) => void\n  className?: string\n}\n\nexport const TagList = ({ tags, selectedTag, clickTag, className }: TagListProps) => (\n  <ul\n    className={clsx(styles.tagList, className)}\n    onClick={(e) => clickTag(e)}\n    onKeyDown={(e) => clickTag(e)}\n    role=\"presentation\"\n  >\n    {tags.map(({ fieldValue, totalCount }) => {\n      const value = getRefinedStringValue(fieldValue)\n\n      return (\n        <li key={value} className={styles.tagItem} data-tag={value}>\n          <TagButtonWithCount name={value} count={totalCount} isSelected={selectedTag === value} />\n        </li>\n      )\n    })}\n  </ul>\n)\n","// extracted by mini-css-extract-plugin\nexport var tagItem = \"TagList-module--tagItem--6c929\";\nexport var tagList = \"TagList-module--tagList--bf40d\";","// extracted by mini-css-extract-plugin\nexport var aside = \"Home-module--aside--85fdc\";\nexport var divider = \"Home-module--divider--1e899\";\nexport var main = \"Home-module--main--c9d7f\";\nexport var postList = \"Home-module--postList--2b55e\";\nexport var shrinkSpace = \"Home-module--shrinkSpace--62acc\";\nexport var tagList = \"Home-module--tagList--14f89\";\nexport var wrapper = \"Home-module--wrapper--b5449\";","export const TAGS = {\n  ALL: 'All',\n} as const\n","import type { KeyboardEvent, MouseEvent } from 'react'\nimport { useCallback, useMemo, useState } from 'react'\n\nimport { TAGS } from '../constants'\n\nexport const useTag = (totalCount: number, group: Queries.HomeQuery['allMarkdownRemark']['group']) => {\n  const tags = useMemo(\n    () => [{ fieldValue: TAGS.ALL, totalCount }, ...group].sort((a, b) => b.totalCount - a.totalCount),\n    [group, totalCount]\n  )\n  const [selectedTag, setSelectedTag] = useState<string>(TAGS.ALL)\n  const clickTag = useCallback(({ target }: MouseEvent<HTMLElement> | KeyboardEvent<HTMLElement>) => {\n    if (!(target instanceof HTMLElement)) return\n    const $tagItem = target.closest('li')\n    if (!$tagItem) return\n    $tagItem?.dataset.tag && setSelectedTag($tagItem.dataset.tag)\n  }, [])\n\n  return { tags, selectedTag, clickTag }\n}\n","import type { HeadProps, PageProps } from 'gatsby'\n\nimport { FloatingButton, ProfileCard, Seo } from '@/components'\nimport { getRefinedStringValue } from '@/utils'\n\nimport { PostList, RecentPost, TagList } from './components'\nimport * as styles from './Home.module.css'\nimport { usePostInfiniteScroll, useTag } from './hooks'\n\nconst Home = ({ data, location: { pathname } }: PageProps<Queries.HomeQuery>) => {\n  const { nodes: allPosts, totalCount, group } = data.allMarkdownRemark\n  const recentPosts = allPosts.slice(0, 2)\n  const { tags, selectedTag, clickTag } = useTag(totalCount, group)\n  const { visiblePosts } = usePostInfiniteScroll(allPosts, selectedTag, totalCount)\n\n  return (\n    <main className={styles.main}>\n      <aside className={styles.aside}>\n        <ProfileCard pathname={pathname} />\n      </aside>\n      <div className={styles.shrinkSpace}></div>\n      <section className={styles.wrapper}>\n        <RecentPost posts={recentPosts} />\n        <hr className={styles.divider}></hr>\n        <TagList tags={tags} selectedTag={selectedTag} clickTag={clickTag} className={styles.tagList} />\n        <PostList posts={visiblePosts} className={styles.postList} />\n      </section>\n      <FloatingButton />\n    </main>\n  )\n}\n\nexport const Head = ({ location: { pathname }, data: { site, file } }: HeadProps<Queries.HomeQuery>) => {\n  const seo = {\n    title: site?.siteMetadata.title,\n    description: site?.siteMetadata.description,\n    heroImage: getRefinedStringValue(file?.publicURL),\n  }\n\n  return <Seo title={seo.title} description={seo.description} heroImage={seo.heroImage} pathname={pathname}></Seo>\n}\n\nexport default Home\n","import { useEffect, useMemo, useState } from 'react'\n\nimport { $ } from '@/utils'\n\nimport { TAGS } from '../constants'\n\nexport const usePostInfiniteScroll = (\n  allPosts: Queries.HomeQuery['allMarkdownRemark']['nodes'],\n  selectedTag: string,\n  totalCount: number\n) => {\n  const posts = useMemo(\n    () => allPosts.filter(({ frontmatter: { tags } }) => selectedTag === TAGS.ALL || tags.includes(selectedTag)),\n    [allPosts, selectedTag]\n  )\n  const [displayedItems, setDisplayedItems] = useState(8)\n  const visiblePosts = posts.slice(0, displayedItems)\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (!entries[0].isIntersecting) return\n\n        if (displayedItems <= totalCount) {\n          setDisplayedItems((prev) => prev + 8)\n        } else {\n          observer.disconnect()\n        }\n      },\n      { threshold: 0 }\n    )\n    observer.observe($<HTMLElement>('footer'))\n    return () => observer.disconnect()\n  }, [displayedItems, totalCount])\n\n  return { visiblePosts }\n}\n"],"names":["Date","_ref","date","className","_jsx","clsx","children","Description","description","TagList","tags","map","tag","Tag","name","Title","title","Post","variants","slug","heroImage","heroImageAlt","image","getRefinedImage","Link","to","match","with","_jsxs","GatsbyImage","alt","typo","exhaustive","PostList","posts","_ref2","_heroImage$childImage","frontmatter","id","childImageSharp","gatsbyImageData","RecentPost","_Fragment","TagButtonWithCount","count","isSelected","onClick","selectedTag","clickTag","e","onKeyDown","role","fieldValue","totalCount","value","getRefinedStringValue","TAGS","ALL","Head","location","pathname","data","site","file","seo","siteMetadata","publicURL","Seo","nodes","allPosts","group","allMarkdownRemark","recentPosts","slice","useTag","useMemo","concat","_toConsumableArray","sort","a","b","setSelectedTag","useState","useCallback","target","HTMLElement","$tagItem","closest","dataset","visiblePosts","usePostInfiniteScroll","filter","includes","displayedItems","setDisplayedItems","useEffect","observer","IntersectionObserver","entries","isIntersecting","prev","disconnect","threshold","observe","$","ProfileCard","FloatingButton"],"sourceRoot":""}